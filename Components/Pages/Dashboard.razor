@page "/dash-board"
@using TrackFlow.Services
@using Radzen.Blazor

@inject ShiftService ShiftService
@inject dbforallService dbforalLService


<!-- Inject directive commented out -->
<!--inject DiscordService DiscordService-->

@attribute [Authorize]


<PageTitle>DashBoard</PageTitle>

<RadzenText Text="Dashboard" TextStyle="TextStyle.H3" TagName="TagName.H1" style="margin: 0;" /> <br>


<div style="margin-bottom: 20px; background-color: #f2f2f2; padding: 10px; border-radius: 8px;">
    
    <div style="background-color: #ccc; padding: 10px; border-radius: 8px; width: 462px; padding-top: 10px; text-align: center" class="rz-data-grid">
        <p style="margin: 0"><strong>Status:</strong> <span>@GetShiftStatus()</span></p>
    </div>
    <RadzenButton @ref="ManageShiftButton" Style="width: 150px; margin-top: 10px;" Text="@buttonText" Click="HandleButtonClick" ButtonType="Radzen.ButtonType.Button" Visible="true" Disabled="@IsShiftButtonDisabled"></RadzenButton>
    @if (ShiftService.IsShiftStarted)
    {
        <RadzenButton @ref="ManageBreakButton" Style="width: 150px; margin-top: 10px; margin-right: 10px;  margin-left: 10px;" Text="@breakButtonText" Click="HandleTakeBreakClick" Disabled="@IsBreakButtonDisabled"></RadzenButton>
        <RadzenButton @ref="ManageLunchButton" Style="width: 150px; margin-top: 10px;" Text="@lunchButtonText" Click="HandleTakeLunchClick" Disabled="@IsLunchButtonDisabled"></RadzenButton>
    }
</div>



<RadzenRow>
    <RadzenColumn Size="6">
        <div class="card" style="margin-top: 20px; border: 1px solid #ccc; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
            <div class="card-header" style="background-color: #f0f0f0; border-bottom: 1px solid #ddd; padding: 10px;">
                <h3 class="card-title" style="margin: 0; font-size: 1.2rem; color: #333;">Shift Activities</h3>
            </div>
            <div class="card-body" style="padding: 20px;">
                <table class="table table-striped table-bordered table-hover" style="margin-bottom: 0;">
                    <thead class="thead-dark">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Action</th>
                            <th scope="col">Time</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var activity in ShiftService.ShiftActivities)
                        {
                            <tr>
                                <td>@activity.Number</td>
                                <td>@activity.Type.GetStringValue()</td>
                                <td>@activity.Time.ToString("HH:mm:ss")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </RadzenColumn>
</RadzenRow>



@code {
    RadzenButton ManageShiftButton;
    RadzenButton ManageBreakButton;
    RadzenButton ManageLunchButton;

    string buttonText => ShiftService.IsShiftStarted ? "End Shift" : "Start Shift";
    string breakButtonText => ShiftService.IsOnBreak ? "End Break" : "Take Break";
    string lunchButtonText => ShiftService.IsOnLunch ? "End Lunch" : "Take Lunch";

    string GetShiftStatus()
    {

        string shiftStatus = ShiftService.IsShiftStarted ? 
            (!string.IsNullOrEmpty(activityRecord.ShiftStartTime) ?
                $"Shift Started at {DateTime.ParseExact(activityRecord.ShiftStartTime, "yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture).ToString("HH:mm:ss")}" : 
                "Shift start time is not available") :
            "Shift is Not Started";


        if (ShiftService.IsOnBreak)
        {
        return $"{shiftStatus} - Break taken at {DateTime.Now.ToString("HH:mm:ss")}";
        }
        else if (ShiftService.IsOnLunch)
        {
        return $"{shiftStatus} - Lunch taken at {DateTime.Now.ToString("HH:mm:ss")}";
        }

        return shiftStatus;
    }

    bool IsBreakButtonDisabled => ShiftService.IsOnLunch;
    bool IsLunchButtonDisabled => ShiftService.IsOnBreak;
    bool IsShiftButtonDisabled => IsShiftEndTimeToday();

    bool IsShiftEndTimeToday()
    {
        // Check if ShiftEndTime was today
        if (!string.IsNullOrEmpty(activityRecord.ShiftEndTime))
        {
            DateTime shiftEndTime = DateTime.ParseExact(activityRecord.ShiftEndTime, "yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
            return shiftEndTime.Date == DateTime.Today;
        }
        return false; // Return false if ShiftEndTime is null or empty
    }



    protected async Task HandleButtonClick()
    {
        if (previousRecord != null && !string.IsNullOrEmpty(previousRecord.ShiftStartTime))
        {
            // Check if the user has already started a shift today
            // Parse the ShiftStartTime string into a DateTime object
            DateTime previousShiftStartTime = DateTime.ParseExact(previousRecord.ShiftStartTime, "yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
            // Check if the date parts are the same, ignoring the time component
            if (previousShiftStartTime.Date == DateTime.Today && !ShiftService.IsShiftStarted)
            {
                // Previous shift started today and the current shift is not started yet
                ShowNotification("Shift Already Started", "Oops! It seems you've already started a shift today. Only one shift per day is allowed. 😕", NotificationSeverity.Warning);
                return;
            }
        }
        
        var (shiftId, startTime, endTime) = await dbforalLService.GetShiftDetailsByUserId(Security.User.Id);

        if (ShiftService.IsShiftStarted)
        {
            // Check if the current time is before the shift end time
            if (endTime.HasValue && DateTime.Now < endTime)
            {
                // Show a confirmation dialog
                var result = await DialogService.Confirm("Are you sure you want to end your shift before the scheduled end time? ☹️ Please note that there's a fine for ending your shift early.", "Confirm Shift End", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });

                // Check if the result is not null and is true
                if (result == true)
                {
                    // User confirmed, continue with ending the shift
                    ShiftService.EndShift();

                    activityRecord.ShiftEndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
                    DialogService.Close(activityRecord);
                    ShowNotification("Shift Ended", "Congratulations! Your shift has ended successfully. Have a great day! 😊", NotificationSeverity.Info);

                    if (endTime.HasValue)
                    {
                        await CheckIfDepartingEarly(endTime.Value);
                    }
                }
                else if (result == false)
                {
                    // User clicked "No" button, return without ending the shift
                    return;
                }
                else
                {
                    // User closed the dialog without clicking a button, handle as cancellation
                    return;
                }
            }
            else
            {
                // Shift end time reached, end the shift
                ShiftService.EndShift();

                activityRecord.ShiftEndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
                DialogService.Close(activityRecord);
                ShowNotification("Shift Ended", "Congratulations! Your shift has ended successfully. Have a great day! 😊", NotificationSeverity.Info);

                if (endTime.HasValue)
                {
                    await CheckIfDepartingEarly(endTime.Value);
                }
            }
        }
        else
        {
            try
            {
                ShiftService.StartShift();
                activityRecord.UserID = await dbforallService.GetAspNetUserIdByUsername(Security.User.UserName);
                activityRecord.ShiftStartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                await dbforallService.CreateActivityRecord(activityRecord);
                DialogService.Close(activityRecord);
                if (startTime.HasValue)
                {
                    await CheckIfStartingLate(startTime.Value);
                }
            }
            catch (Exception ex)
            {
                errorVisible = true;
                // Potentially show a notification about the failure.
            }
        }
    }


    protected async Task HandleTakeBreakClick()
    {

        bool isValidBreakTime = await IsValidBreakTime();

        if (!isValidBreakTime)
        {
            ShowNotification("Invalid Break Time", "Oops! It seems you're trying to take a break outside of your scheduled shift hours or within the first/last hour. 😊", NotificationSeverity.Warning);
            return;
        }
        if (ShiftService.IsOnBreak)
        {
            try
            {
                // Determine the appropriate BreakStartTime property based on BreakCount
                switch (ShiftService.BreakCount)
                {
                    case 0:
                        activityRecord.Break1EndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        await CheckIfLateFromBreak(DateTime.Parse(activityRecord.Break1StartTime).AddMinutes(7)); // Check for being late after the 1st break

                        break;
                    case 1:
                        activityRecord.Break2EndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        await CheckIfLateFromBreak(DateTime.Parse(activityRecord.Break2StartTime).AddMinutes(7)); // Check for being late after the 2nd break

                        break;
                    case 2:
                        activityRecord.Break3EndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        await CheckIfLateFromBreak(DateTime.Parse(activityRecord.Break3StartTime).AddMinutes(7)); // Check for being late after the 3rd break

                        break;
                    case 3:
                        activityRecord.Break4EndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        await CheckIfLateFromBreak(DateTime.Parse(activityRecord.Break4StartTime).AddMinutes(7)); // Check for being late after the 4th break

                        break;
                    default:
                        // Handle unexpected BreakCount value
                        break;
                }

                // Update the activity record
                await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
                DialogService.Close(activityRecord);
            }
            catch (Exception ex)
            {
                errorVisible = true;
            }
            ShiftService.TakeBreak();
            ShowNotification("Break Completed", "Congratulations! You've successfully finished your break. Let's get back to work! 🚀", NotificationSeverity.Success);
        }
        else if (ShiftService.BreakCount >= 3)
        {
            ShowNotification("Break Limit Exceeded", "Oops! It seems you've already taken the maximum number of breaks allowed during your shift. You cannot take more than 4 breaks. 😕", NotificationSeverity.Warning);
        }
        else
        {
            ShiftService.TakeBreak();
            try
            {
                
                // Determine the appropriate BreakStartTime property based on BreakCount
                switch (ShiftService.BreakCount)
                {
                    
                    case 0:
                        activityRecord.Break1StartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        break;
                    case 1:
                        activityRecord.Break2StartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        break;
                    case 2:
                        activityRecord.Break3StartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        break;
                    case 3:
                        activityRecord.Break4StartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                        break;
                    default:
                        // Handle unexpected BreakCount value
                        break;
                }

                // Update the activity record
                await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
                DialogService.Close(activityRecord);
            }
            catch (Exception ex)
            {
                errorVisible = true;
            }

            ShowNotification("Break Success", "Great news! Your break has been successfully recorded. Enjoy your time off! 😊", NotificationSeverity.Success);
            
        }
    }

protected async Task HandleTakeLunchClick()
{
    // First, check if it's a valid break time.
    bool isValidBreakTime = await IsValidBreakTime();

    if (!isValidBreakTime)
    {
        ShowNotification("Invalid Break Time", "Oops! It looks like you're trying to take a break outside of your scheduled shift hours or within the first/last hour. 😊", NotificationSeverity.Warning);
        return;
    }

    if (ShiftService.IsOnLunch)
    {   
        // Log the end of lunch
        ShiftService.TakeLunch(); // End the lunch

        activityRecord.LunchEndTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
        DialogService.Close(activityRecord);

        ShowNotification("Lunch Completed", "Congratulations! You've successfully finished your lunch break. Let's get back to work! 🚀", NotificationSeverity.Success);

        // Calculate expected lunch end time
        var expectedLunchEndTime = DateTime.ParseExact(activityRecord.LunchStartTime, "yyyy-MM-dd HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture)
            .AddMinutes(60); // Assuming lunch duration is 1 hour

        // Set up a timer to check if the user is late from their lunch
        await CheckIfLateFromLunch(expectedLunchEndTime);
    }
    else if (ShiftService.LunchCount >= 1)
    {
        ShowNotification("Lunch Limit Exceeded", "Oops! It seems you've already taken your lunch break. You cannot take more than one lunch during a shift. 🥪", NotificationSeverity.Warning);
    }
    else
    {
        ShiftService.TakeLunch();        

        activityRecord.LunchStartTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

        await dbforallService.UpdateActivityRecord(activityRecord.ActivityID, activityRecord);
        DialogService.Close(activityRecord);

        ShowNotification("Lunch Success", "Great news! Your lunch break has been successfully recorded. Enjoy your meal! 🍽️", NotificationSeverity.Success);


    }
}



    void ShowNotification(string summary, string detail, NotificationSeverity severity)
    {
        NotificationService.Notify(new NotificationMessage
        {
            Severity = severity,
            Summary = summary,
            Detail = detail,
            Duration = 4000
        });
    }

    protected async Task<bool> IsValidBreakTime()
    {
        // Retrieve shift details
        var (ShiftId, StartTime, EndTime) = await dbforalLService.GetShiftDetailsByUserId(Security.User.Id);

        // Ensure start and end times are not null
        if (!StartTime.HasValue || !EndTime.HasValue)
        {
            // Consider returning false or throwing an exception depending on your application's needs
            return false;
        }

        var currentTime = DateTime.Now;

        // Since StartTime and EndTime are nullable, use Value to get their DateTime values
        var startTime = StartTime.Value;
        var endTime = EndTime.Value;

        // Adjust for shifts that span across midnight
        if (endTime < startTime)
        {
            // Add a day to the end time to represent the next day
            endTime = endTime.AddDays(1);
        }

        var shiftDuration = endTime - startTime;
        var elapsedTime = currentTime - startTime;

        var firstHourDuration = TimeSpan.FromHours(1);
        var lastHourDuration = TimeSpan.FromHours(1);

        bool isInFirstHour = elapsedTime <= firstHourDuration;
        bool isInLastHour = shiftDuration - elapsedTime <= lastHourDuration;

        // If current time is within the first or last hour of the shift,
        // or if the current time is after the end time for shifts that span across midnight, break is not valid
        return !isInFirstHour && !isInLastHour && currentTime <= endTime;
    }

    protected async Task CreateFineIfApplicable(int violationTypeId)
    {
        if (violationTypeId == 0)
        {
            // No violation, handle as needed.
            return;
        }
        
        // Now, fetch the ViolationType details using the ID obtained.
        var violationType = await dbforalLService.GetViolationTypeByViolationId(violationTypeId);
        if (violationType == null)
        {
            // ViolationType not found. Handle this case.
            return;
        }
        
        // Assuming you have User's ID in a variable userId
        string userId = Security.User.Id; // Example, adjust as per your actual user ID retrieval

        var fine = new Models.dbforall.Fine
        {
            UserID = userId,
            ViolationType = violationTypeId,
            Description = $"${violationType.Amount} - {violationType.Description} - {DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}",
            RecordID = activityRecord.ActivityID
            
            // Include any other necessary properties
        };

        // Proceed to create the fine record
        await dbforalLService.CreateFine(fine);

        // Send violation message to Discord
        string message = $"Fine created: {fine.Description}";
        // await SendViolationMessageToDiscord(message);
    }

    protected async Task<bool> CheckIfStartingLate(DateTime startTime)
    {
        var currentTime = DateTime.Now;
        // Check if the current time is later than the shift start time minus 1 minute (allowing for being late by 1 minute)
        var isStartingLate = currentTime > startTime.AddMinutes(1);
        
        // Create fine if starting late
        if (isStartingLate)
        {
            ShowNotification("Lateness Alert", "Oops! It seems you're starting late. A fine has been automatically applied. Please ensure prompt attendance in the future. 😣", NotificationSeverity.Warning);

            await CreateFineIfApplicable(1); // 1 represents late start violation
        }
        else
        {
        ShowNotification("On Time", "Congratulations! You've arrived on time today. Keep up the excellent work! 😇", NotificationSeverity.Success);

        }

        return isStartingLate;
    }

    /*
    protected async Task SendViolationMessageToDiscord(string message)
    {
        // Replace "your_webhook_url_here" with your actual webhook URL
        string webhookUrl = $"{discordService.captainHookUrl}";
        
        // Send the message to Discord
        await DiscordService.SendViolationMessageAsync(webhookUrl, message);
    }
    */


    protected async Task<bool> CheckIfDepartingEarly(DateTime endTime)
    {
        var currentTime = DateTime.Now;
        // Check if the current time is earlier than the shift end time plus 1 minute (allowing for departing earlier by 1 minute)
        var isDepartingEarly = currentTime < endTime.AddMinutes(-1);
        
        // Create fine if departing early
        if (isDepartingEarly)
        {
            await CreateFineIfApplicable(2); // 2 represents early departure violation
        }

        return isDepartingEarly;
    }

    protected async Task CheckIfLateFromLunch(DateTime lunchEndTime)
    {
        var currentTime = DateTime.Now;
        // Check if the current time is later than the lunch end time plus 1 minute (allowing for being late by 1 minute)
        var isLateFromLunch = currentTime > lunchEndTime.AddMinutes(1);
        
        // Create fine if late from lunch
        if (isLateFromLunch)
        {
            ShowNotification("Late Alert", "Uh-oh! It appears you're running late returning from lunch. Please try to return promptly next time. 😕", NotificationSeverity.Warning);
            await CreateFineIfApplicable(3); // 3 represents late from lunch violation
        }
    }

    protected async Task CheckIfLateFromBreak(DateTime breakEndTime)
    {
        var currentTime = DateTime.Now;
        // Check if the current time is later than the lunch end time plus 1 minute (allowing for being late by 1 minute)
        var isLateFromBreak = currentTime > breakEndTime;
        
        // Create fine if late from lunch
        if (isLateFromBreak)
        {
            ShowNotification("Break Time Alert", "Oops! It looks like you're running late returning from your break. Let's aim to be more punctual next time. 😕", NotificationSeverity.Warning);

            await CreateFineIfApplicable(4); // 4 represents late from lunch violation
        }
    }
    
    
}
